class Solution {
public:

    bool isValid(char n, int r, int c, vector<vector<char>>& board){
        
        for(int i=0;i<9;i++){
            if(board[i][c] == n)return false;

            if(board[r][i] == n)return false;

            if(board[3*(r/3)+i/3][3*(c/3)+i%3] == n)return false;    // very imp step to remember to check in 3x3 grid need to create this formula to calculate row and column
            
        }

        return true;

    }

    bool sudoku(vector<vector<char>>& board){

      for(int i = 0;i < board.size();i++){
        for(int j = 0;j < board[0].size();j++){
            if(board[i][j] == '.'){
                for(char n = '1';n <= '9';n++){
                    if(isValid(n,i,j,board)){
                        board[i][j] = n;
                        
                        if(sudoku(board) == true){
                            return true;
                        }
                        else{
                            board[i][j] = '.';
                        }

                    }
                    
                }
                return false;
            }
        
        }
      }

      return true;

    }

    void solveSudoku(vector<vector<char>>& board) {
        
        sudoku(board);
    }
};

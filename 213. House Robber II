class Solution {
public: 
    int help(vector<int> & nums){

        int n = nums.size();
        int prev=nums[0];   // for space optimisation prev and prev2 are used because at a time we need only previous 2 index elements only so no need to craete vector
        int prev2=0;

        for(int i=1;i<n;i++){

            int pick = nums[i];            // pick
            if(i>1)pick += nums[i-2];      // if prev2 is negative so to handle that case and also if this ith index is being picked then its prev->prev can only be picked

            int not_pick = nums[i-1];     // if ith element is not picked then prev element can be picked

            nums[i] = max(pick,not_pick);

            prev2 = prev;
            prev = nums[i];

        } 

        return prev;

    }   

    int rob(vector<int>& nums) {
        if(nums.size()==1)return nums[0];

        vector<int> dp;    // vector withouth 0th index element
        vector<int> dp2;   // vector without last index element

        for(int i=0;i<nums.size();i++){
            if(i!=0)dp.push_back(nums[i]);
            if(i!=nums.size()-1)dp2.push_back(nums[i]);
        }

        return max(help(dp),help(dp2));
       
    }
};
